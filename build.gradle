plugins {
    id 'java'
    id 'maven'

    id 'idea'
    id 'eclipse'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.github.ben-manes.versions' version '0.13.0'

}



configurations {
    deployerJars
}

repositories {
    mavenCentral()
    maven {
        name = 'FTB'
        url = 'http://ftb.cursecdn.com/FTB2/maven'
    }
    maven {
        name = 'jenkins'
        url = 'http://repo.jenkins-ci.org/public'
    }
    maven {
        name = 'cloudbees-jongo-early-release'
        url = 'http://repository-jongo.forge.cloudbees.com/release'
    }
    maven {
        name = 'DVS1'
        url = 'http://dvs1.progwml6.com/files/maven'
    }

}

configurations.all { exclude group: 'commons-logging' }//we use slf4j and replace this w/ the slf4j bridge
dependencies {
    compile 'com.feed_the_beast:javacurseapi:0.1.0.+'

    compile 'com.beust:jcommander:1.56' //command line argument support
    compile 'ninja.leaping.configurate:configurate-hocon:3.1.1'//configuration

    //compile 'org.jsoup:jsoup:1.9.2' //scraping from html pages as needed
    compile 'org.apache-extras.beanshell:bsh:2.0b6' //commands

    compile 'com.sparkjava:spark-core:2.5'  //for creating a web interface and rest endpoints
    compile 'com.sparkjava:spark-debug-tools:0.5' //debugging errors w/ endpoints
    compile 'com.sparkjava:spark-template-mustache:2.3' //webpage templates

    compile 'com.atlassian.commonmark:commonmark:0.7.0'//commonmark markdown lib for java
    compile 'com.atlassian.commonmark:commonmark-ext-gfm-tables:0.7.0'//tables from GitHub Flavored Markdown
    compile 'com.atlassian.commonmark:commonmark-ext-gfm-strikethrough:0.7.0'//strikethrough of text
    compile 'com.atlassian.commonmark:commonmark-ext-heading-anchor:0.7.0'//headings have id's
    compile 'com.atlassian.commonmark:commonmark-ext-ins:0.7.0'//underlining

    compile 'org.kohsuke:github-api:1.77'//GH integrations
    compile 'org.slf4j:jcl-over-slf4j:1.7.21'// we don't want commons logging around
    compile 'ch.qos.logback:logback-classic:1.1.7'

    compile 'com.github.ben-manes.caffeine:caffeine:2.3.3'//high performance local cache
    compile 'com.github.ben-manes.caffeine:guava:2.3.3'


    compile 'com.google.inject:guice:4.1.0' //injections

    compile 'org.projectlombok:lombok:1.16.10'

    compile 'org.mongodb:mongodb-driver:3.3.0'//nosql storage for commands & ban data
    compile 'org.jongo:jongo:1.4-early-20160606-0118'//mongo helpers & pojo mappings

    compile 'commons-codec:commons-codec:1.10'

    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.10'
}

project.ext {
    mainClass = 'com.feed_the_beast.ftbcurseappbot.Main'
    currentYear = '2016'
}
if (System.getenv().BUILD_NUMBER != null) {
    ext.buildNum = System.getenv().BUILD_NUMBER
} else {
    ext.buildNum = "9999999"
}

mainClassName = project.mainClass
group = 'com.feed_the_beast'
version = "0.0.1-${project.buildNum}"
description = "FTB moderation bot for CurseApp"

sourceCompatibility = 1.8
targetCompatibility = 1.8
shadowJar {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    classifier = 'all'
}
build.dependsOn(shadowJar)


jar {
    manifest {
        attributes 'Main-Class': project.mainClass, 'Launcher-Jenkins': project.buildNum
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.java
    from sourceSets.main.resources
    classifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = "javadoc"
}

artifacts {
    archives shadowJar
    archives jar
    archives sourceJar
    archives javadocJar
}

def gitSha() {
    return 'git rev-parse HEAD'.execute().text.trim()
}

if (project.hasProperty("local_maven")) {
    apply plugin: 'maven'
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "file://${local_maven}")
            }
        }
    }
}
if (project.hasProperty("remote_maven") && project.hasProperty("sftp_pass")) {
    apply plugin: 'maven'
    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "sftp://${remote_maven}") {
                authentication(userName: "${ftp_username}", password: "${sftp_pass}")
            }
        }
    }
}
